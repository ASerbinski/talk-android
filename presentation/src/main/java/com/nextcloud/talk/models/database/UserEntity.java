// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.nextcloud.talk.models.database;

import android.os.Parcel;
import android.os.Parcelable;

import io.requery.Persistable;
import io.requery.android.EntityParceler;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.QueryAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.BooleanProperty;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import javax.annotation.Generated;

@Generated("io.requery.processor.EntityProcessor")
public class UserEntity implements User, Persistable, Parcelable {
    public static final NumericAttribute<UserEntity, Long> ID = 
    new AttributeBuilder<UserEntity, Long>("id", long.class)
    .setProperty(new LongProperty<UserEntity>() {
        @Override
        public Long get(UserEntity entity) {
            return entity.id;
        }

        @Override
        public void set(UserEntity entity, Long value) {
            entity.id = value;
        }

        @Override
        public long getLong(UserEntity entity) {
            return entity.id;
        }

        @Override
        public void setLong(UserEntity entity, long value) {
            entity.id = value;
        }
    })
    .setPropertyName("getId")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$id_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(true)
    .setReadOnly(true)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<UserEntity, String> USER_ID = 
    new AttributeBuilder<UserEntity, String>("userId", String.class)
    .setProperty(new Property<UserEntity, String>() {
        @Override
        public String get(UserEntity entity) {
            return entity.userId;
        }

        @Override
        public void set(UserEntity entity, String value) {
            entity.userId = value;
        }
    })
    .setPropertyName("getUserId")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$userId_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$userId_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<UserEntity, String> USERNAME = 
    new AttributeBuilder<UserEntity, String>("username", String.class)
    .setProperty(new Property<UserEntity, String>() {
        @Override
        public String get(UserEntity entity) {
            return entity.username;
        }

        @Override
        public void set(UserEntity entity, String value) {
            entity.username = value;
        }
    })
    .setPropertyName("getUsername")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$username_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$username_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<UserEntity, String> BASE_URL = 
    new AttributeBuilder<UserEntity, String>("baseUrl", String.class)
    .setProperty(new Property<UserEntity, String>() {
        @Override
        public String get(UserEntity entity) {
            return entity.baseUrl;
        }

        @Override
        public void set(UserEntity entity, String value) {
            entity.baseUrl = value;
        }
    })
    .setPropertyName("getBaseUrl")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$baseUrl_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$baseUrl_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<UserEntity, String> TOKEN = 
    new AttributeBuilder<UserEntity, String>("token", String.class)
    .setProperty(new Property<UserEntity, String>() {
        @Override
        public String get(UserEntity entity) {
            return entity.token;
        }

        @Override
        public void set(UserEntity entity, String value) {
            entity.token = value;
        }
    })
    .setPropertyName("getToken")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$token_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$token_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<UserEntity, String> DISPLAY_NAME = 
    new AttributeBuilder<UserEntity, String>("displayName", String.class)
    .setProperty(new Property<UserEntity, String>() {
        @Override
        public String get(UserEntity entity) {
            return entity.displayName;
        }

        @Override
        public void set(UserEntity entity, String value) {
            entity.displayName = value;
        }
    })
    .setPropertyName("getDisplayName")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$displayName_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$displayName_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<UserEntity, String> PUSH_CONFIGURATION_STATE = 
    new AttributeBuilder<UserEntity, String>("pushConfigurationState", String.class)
    .setProperty(new Property<UserEntity, String>() {
        @Override
        public String get(UserEntity entity) {
            return entity.pushConfigurationState;
        }

        @Override
        public void set(UserEntity entity, String value) {
            entity.pushConfigurationState = value;
        }
    })
    .setPropertyName("getPushConfigurationState")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$pushConfigurationState_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$pushConfigurationState_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<UserEntity, String> CAPABILITIES = 
    new AttributeBuilder<UserEntity, String>("capabilities", String.class)
    .setProperty(new Property<UserEntity, String>() {
        @Override
        public String get(UserEntity entity) {
            return entity.capabilities;
        }

        @Override
        public void set(UserEntity entity, String value) {
            entity.capabilities = value;
        }
    })
    .setPropertyName("getCapabilities")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$capabilities_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$capabilities_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<UserEntity, String> CLIENT_CERTIFICATE = 
    new AttributeBuilder<UserEntity, String>("clientCertificate", String.class)
    .setProperty(new Property<UserEntity, String>() {
        @Override
        public String get(UserEntity entity) {
            return entity.clientCertificate;
        }

        @Override
        public void set(UserEntity entity, String value) {
            entity.clientCertificate = value;
        }
    })
    .setPropertyName("getClientCertificate")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$clientCertificate_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$clientCertificate_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<UserEntity, String> EXTERNAL_SIGNALING_SERVER = 
    new AttributeBuilder<UserEntity, String>("externalSignalingServer", String.class)
    .setProperty(new Property<UserEntity, String>() {
        @Override
        public String get(UserEntity entity) {
            return entity.externalSignalingServer;
        }

        @Override
        public void set(UserEntity entity, String value) {
            entity.externalSignalingServer = value;
        }
    })
    .setPropertyName("getExternalSignalingServer")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$externalSignalingServer_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$externalSignalingServer_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final QueryAttribute<UserEntity, Boolean> CURRENT = 
    new AttributeBuilder<UserEntity, Boolean>("current", boolean.class)
    .setProperty(new BooleanProperty<UserEntity>() {
        @Override
        public Boolean get(UserEntity entity) {
            return entity.current;
        }

        @Override
        public void set(UserEntity entity, Boolean value) {
            entity.current = value;
        }

        @Override
        public boolean getBoolean(UserEntity entity) {
            return entity.current;
        }

        @Override
        public void setBoolean(UserEntity entity, boolean value) {
            entity.current = value;
        }
    })
    .setPropertyName("getCurrent")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$current_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$current_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final QueryAttribute<UserEntity, Boolean> SCHEDULED_FOR_DELETION = 
    new AttributeBuilder<UserEntity, Boolean>("scheduledForDeletion", boolean.class)
    .setProperty(new BooleanProperty<UserEntity>() {
        @Override
        public Boolean get(UserEntity entity) {
            return entity.scheduledForDeletion;
        }

        @Override
        public void set(UserEntity entity, Boolean value) {
            entity.scheduledForDeletion = value;
        }

        @Override
        public boolean getBoolean(UserEntity entity) {
            return entity.scheduledForDeletion;
        }

        @Override
        public void setBoolean(UserEntity entity, boolean value) {
            entity.scheduledForDeletion = value;
        }
    })
    .setPropertyName("getScheduledForDeletion")
    .setPropertyState(new Property<UserEntity, PropertyState>() {
        @Override
        public PropertyState get(UserEntity entity) {
            return entity.$scheduledForDeletion_state;
        }

        @Override
        public void set(UserEntity entity, PropertyState value) {
            entity.$scheduledForDeletion_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final Type<UserEntity> $TYPE = new TypeBuilder<UserEntity>(UserEntity.class, "User")
    .setBaseType(User.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<UserEntity>() {
        @Override
        public UserEntity get() {
            return new UserEntity();
        }
    })
    .setProxyProvider(new Function<UserEntity, EntityProxy<UserEntity>>() {
        @Override
        public EntityProxy<UserEntity> apply(UserEntity entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(PUSH_CONFIGURATION_STATE)
    .addAttribute(CAPABILITIES)
    .addAttribute(USER_ID)
    .addAttribute(USERNAME)
    .addAttribute(ID)
    .addAttribute(CLIENT_CERTIFICATE)
    .addAttribute(EXTERNAL_SIGNALING_SERVER)
    .addAttribute(BASE_URL)
    .addAttribute(TOKEN)
    .addAttribute(DISPLAY_NAME)
    .addAttribute(CURRENT)
    .addAttribute(SCHEDULED_FOR_DELETION)
    .build();

    public static final Parcelable.Creator<UserEntity> CREATOR = new Parcelable.Creator<UserEntity>() {
        @Override
        public UserEntity createFromParcel(Parcel source) {
            return PARCELER.readFromParcel(source);
        }

        @Override
        public UserEntity[] newArray(int size) {
            return new UserEntity[size];
        }
    };

    static final EntityParceler<UserEntity> PARCELER = new EntityParceler<UserEntity>($TYPE);

    private PropertyState $id_state;

    private PropertyState $userId_state;

    private PropertyState $username_state;

    private PropertyState $baseUrl_state;

    private PropertyState $token_state;

    private PropertyState $displayName_state;

    private PropertyState $pushConfigurationState_state;

    private PropertyState $capabilities_state;

    private PropertyState $clientCertificate_state;

    private PropertyState $externalSignalingServer_state;

    private PropertyState $current_state;

    private PropertyState $scheduledForDeletion_state;

    private long id;

    private String userId;

    private String username;

    private String baseUrl;

    private String token;

    private String displayName;

    private String pushConfigurationState;

    private String capabilities;

    private String clientCertificate;

    private String externalSignalingServer;

    private boolean current;

    private boolean scheduledForDeletion;

    private final transient EntityProxy<UserEntity> $proxy = new EntityProxy<UserEntity>(this, $TYPE);

    public UserEntity() {
    }

    @Override
    public long getId() {
        return $proxy.get(ID);
    }

    @Override
    public String getUserId() {
        return $proxy.get(USER_ID);
    }

    public void setUserId(String userId) {
        $proxy.set(USER_ID, userId);
    }

    @Override
    public String getUsername() {
        return $proxy.get(USERNAME);
    }

    public void setUsername(String username) {
        $proxy.set(USERNAME, username);
    }

    @Override
    public String getBaseUrl() {
        return $proxy.get(BASE_URL);
    }

    public void setBaseUrl(String baseUrl) {
        $proxy.set(BASE_URL, baseUrl);
    }

    @Override
    public String getToken() {
        return $proxy.get(TOKEN);
    }

    public void setToken(String token) {
        $proxy.set(TOKEN, token);
    }

    @Override
    public String getDisplayName() {
        return $proxy.get(DISPLAY_NAME);
    }

    public void setDisplayName(String displayName) {
        $proxy.set(DISPLAY_NAME, displayName);
    }

    @Override
    public String getPushConfigurationState() {
        return $proxy.get(PUSH_CONFIGURATION_STATE);
    }

    public void setPushConfigurationState(String pushConfigurationState) {
        $proxy.set(PUSH_CONFIGURATION_STATE, pushConfigurationState);
    }

    @Override
    public String getCapabilities() {
        return $proxy.get(CAPABILITIES);
    }

    public void setCapabilities(String capabilities) {
        $proxy.set(CAPABILITIES, capabilities);
    }

    @Override
    public String getClientCertificate() {
        return $proxy.get(CLIENT_CERTIFICATE);
    }

    public void setClientCertificate(String clientCertificate) {
        $proxy.set(CLIENT_CERTIFICATE, clientCertificate);
    }

    @Override
    public String getExternalSignalingServer() {
        return $proxy.get(EXTERNAL_SIGNALING_SERVER);
    }

    public void setExternalSignalingServer(String externalSignalingServer) {
        $proxy.set(EXTERNAL_SIGNALING_SERVER, externalSignalingServer);
    }

    @Override
    public boolean getCurrent() {
        return $proxy.get(CURRENT);
    }

    public void setCurrent(boolean current) {
        $proxy.set(CURRENT, current);
    }

    @Override
    public boolean getScheduledForDeletion() {
        return $proxy.get(SCHEDULED_FOR_DELETION);
    }

    public void setScheduledForDeletion(boolean scheduledForDeletion) {
        $proxy.set(SCHEDULED_FOR_DELETION, scheduledForDeletion);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof UserEntity && ((UserEntity)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        PARCELER.writeToParcel(this, dest);
    }
}
