// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package com.nextcloud.talk.models.database;

import android.os.Parcel;
import android.os.Parcelable;

import io.requery.Persistable;
import io.requery.android.EntityParceler;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.NumericAttribute;
import io.requery.meta.StringAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.LongProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import javax.annotation.Generated;

@Generated("io.requery.processor.EntityProcessor")
public class ArbitraryStorageEntity implements ArbitraryStorage, Persistable, Parcelable {
    public static final NumericAttribute<ArbitraryStorageEntity, Long> ACCOUNT_IDENTIFIER = 
    new AttributeBuilder<ArbitraryStorageEntity, Long>("accountIdentifier", long.class)
    .setProperty(new LongProperty<ArbitraryStorageEntity>() {
        @Override
        public Long get(ArbitraryStorageEntity entity) {
            return entity.accountIdentifier;
        }

        @Override
        public void set(ArbitraryStorageEntity entity, Long value) {
            entity.accountIdentifier = value;
        }

        @Override
        public long getLong(ArbitraryStorageEntity entity) {
            return entity.accountIdentifier;
        }

        @Override
        public void setLong(ArbitraryStorageEntity entity, long value) {
            entity.accountIdentifier = value;
        }
    })
    .setPropertyName("getAccountIdentifier")
    .setPropertyState(new Property<ArbitraryStorageEntity, PropertyState>() {
        @Override
        public PropertyState get(ArbitraryStorageEntity entity) {
            return entity.$accountIdentifier_state;
        }

        @Override
        public void set(ArbitraryStorageEntity entity, PropertyState value) {
            entity.$accountIdentifier_state = value;
        }
    })
    .setKey(true)
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .buildNumeric();

    public static final StringAttribute<ArbitraryStorageEntity, String> KEY = 
    new AttributeBuilder<ArbitraryStorageEntity, String>("key", String.class)
    .setProperty(new Property<ArbitraryStorageEntity, String>() {
        @Override
        public String get(ArbitraryStorageEntity entity) {
            return entity.key;
        }

        @Override
        public void set(ArbitraryStorageEntity entity, String value) {
            entity.key = value;
        }
    })
    .setPropertyName("getKey")
    .setPropertyState(new Property<ArbitraryStorageEntity, PropertyState>() {
        @Override
        public PropertyState get(ArbitraryStorageEntity entity) {
            return entity.$key_state;
        }

        @Override
        public void set(ArbitraryStorageEntity entity, PropertyState value) {
            entity.$key_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<ArbitraryStorageEntity, String> OBJECT = 
    new AttributeBuilder<ArbitraryStorageEntity, String>("object", String.class)
    .setProperty(new Property<ArbitraryStorageEntity, String>() {
        @Override
        public String get(ArbitraryStorageEntity entity) {
            return entity.object;
        }

        @Override
        public void set(ArbitraryStorageEntity entity, String value) {
            entity.object = value;
        }
    })
    .setPropertyName("getObject")
    .setPropertyState(new Property<ArbitraryStorageEntity, PropertyState>() {
        @Override
        public PropertyState get(ArbitraryStorageEntity entity) {
            return entity.$object_state;
        }

        @Override
        public void set(ArbitraryStorageEntity entity, PropertyState value) {
            entity.$object_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final StringAttribute<ArbitraryStorageEntity, String> VALUE = 
    new AttributeBuilder<ArbitraryStorageEntity, String>("value", String.class)
    .setProperty(new Property<ArbitraryStorageEntity, String>() {
        @Override
        public String get(ArbitraryStorageEntity entity) {
            return entity.value;
        }

        @Override
        public void set(ArbitraryStorageEntity entity, String value) {
            entity.value = value;
        }
    })
    .setPropertyName("getValue")
    .setPropertyState(new Property<ArbitraryStorageEntity, PropertyState>() {
        @Override
        public PropertyState get(ArbitraryStorageEntity entity) {
            return entity.$value_state;
        }

        @Override
        public void set(ArbitraryStorageEntity entity, PropertyState value) {
            entity.$value_state = value;
        }
    })
    .setGenerated(false)
    .setReadOnly(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .buildString();

    public static final Type<ArbitraryStorageEntity> $TYPE = new TypeBuilder<ArbitraryStorageEntity>(ArbitraryStorageEntity.class, "ArbitraryStorage")
    .setBaseType(ArbitraryStorage.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<ArbitraryStorageEntity>() {
        @Override
        public ArbitraryStorageEntity get() {
            return new ArbitraryStorageEntity();
        }
    })
    .setProxyProvider(new Function<ArbitraryStorageEntity, EntityProxy<ArbitraryStorageEntity>>() {
        @Override
        public EntityProxy<ArbitraryStorageEntity> apply(ArbitraryStorageEntity entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(ACCOUNT_IDENTIFIER)
    .addAttribute(VALUE)
    .addAttribute(OBJECT)
    .addAttribute(KEY)
    .build();

    public static final Parcelable.Creator<ArbitraryStorageEntity> CREATOR = new Parcelable.Creator<ArbitraryStorageEntity>() {
        @Override
        public ArbitraryStorageEntity createFromParcel(Parcel source) {
            return PARCELER.readFromParcel(source);
        }

        @Override
        public ArbitraryStorageEntity[] newArray(int size) {
            return new ArbitraryStorageEntity[size];
        }
    };

    static final EntityParceler<ArbitraryStorageEntity> PARCELER = new EntityParceler<ArbitraryStorageEntity>($TYPE);

    private PropertyState $accountIdentifier_state;

    private PropertyState $key_state;

    private PropertyState $object_state;

    private PropertyState $value_state;

    private long accountIdentifier;

    private String key;

    private String object;

    private String value;

    private final transient EntityProxy<ArbitraryStorageEntity> $proxy = new EntityProxy<ArbitraryStorageEntity>(this, $TYPE);

    public ArbitraryStorageEntity() {
    }

    @Override
    public long getAccountIdentifier() {
        return $proxy.get(ACCOUNT_IDENTIFIER);
    }

    public void setAccountIdentifier(long accountIdentifier) {
        $proxy.set(ACCOUNT_IDENTIFIER, accountIdentifier);
    }

    @Override
    public String getKey() {
        return $proxy.get(KEY);
    }

    public void setKey(String key) {
        $proxy.set(KEY, key);
    }

    @Override
    public String getObject() {
        return $proxy.get(OBJECT);
    }

    public void setObject(String object) {
        $proxy.set(OBJECT, object);
    }

    @Override
    public String getValue() {
        return $proxy.get(VALUE);
    }

    public void setValue(String value) {
        $proxy.set(VALUE, value);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof ArbitraryStorageEntity && ((ArbitraryStorageEntity)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        PARCELER.writeToParcel(this, dest);
    }
}
